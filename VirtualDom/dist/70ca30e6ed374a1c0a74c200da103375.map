{"version":3,"sources":["../util.js","../element.js","../patch.js","../diff.js","index.js"],"names":["_","type","obj","Object","prototype","toString","call","replace","isArray","list","slice","arrayLike","index","Array","isUndefined","value","isUndef","truthy","isString","each","array","fn","i","len","length","hump2lineae","str","m","toLowerCase","toArray","listLike","push","setAttr","node","key","style","cssText","tagName","setAttribute","el","props","children","Element","arguments","filter","count","child","document","createElement","entries","propName","propValue","childEl","render","createTextNode","appendChild","patch","types","TEXT","PROPS","REPLACE","REMOVE","APPEND","patches","walker","dfsWalk","currentPatches","childNodes","applyPatches","removeCount","currentPatch","newNode","parentNode","replaceChild","insertNode","removeIndex","removeChild","setProps","textContent","content","Error","removeAttribute","oldTree","newTree","oldNode","propsPatches","diffProps","diffChildren","oldChildren","newChildren","leftNode","currentNodeIndex","newChild","hasDiff","oldProps","newProps","hasOwnProperty","tree","root","body","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,IAAI;AAEJC,QAFI,gBAECC,GAFD,EAEM;AACN,eAAOC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,EAAoCK,OAApC,CAA4C,gBAA5C,EAA8D,EAA9D,CAAP;AACH,KAJG;AAKJC,WALI,mBAKIC,IALJ,EAKU;AACV,eAAOT,EAAEC,IAAF,CAAOQ,IAAP,MAAiB,OAAxB;AACH,KAPG;AAQJC,SARI,iBAQEC,SARF,EAQaC,KARb,EAQoB;AACpB,eAAOC,MAAMT,SAAN,CAAgBM,KAAhB,CAAsBJ,IAAtB,CAA2BK,SAA3B,EAAsCC,KAAtC,CAAP;AACH,KAVG;AAWJE,eAXI,uBAWQC,KAXR,EAWe;AACf,eAAO,OAAOA,KAAP,KAAiB,WAAxB;AACH,KAbG;AAcJC,WAdI,mBAcID,KAdJ,EAcU;AACV,eAAO,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,UAAU,IAAjD;AACH,KAhBG;AAiBJE,UAjBI,kBAiBGF,KAjBH,EAiBU;AACV,eAAO,CAAC,CAACA,KAAT;AACH,KAnBG;AAoBJG,YApBI,oBAoBKT,IApBL,EAoBW;AACX,eAAOT,EAAEC,IAAF,CAAOQ,IAAP,MAAiB,QAAxB;AACH,KAtBG;AAuBJU,QAvBI,gBAuBCC,KAvBD,EAuBQC,EAvBR,EAuBY;AACZ,aAAK,IAAIC,IAAI,CAAR,EAAWC,MAAMH,MAAMI,MAA5B,EAAoCF,IAAIC,GAAxC,EAA6CD,GAA7C,EAAkD;AAC9CD,eAAGD,MAAME,CAAN,CAAH,EAAaA,CAAb;AACH;AACJ,KA3BG;AA4BJG,eA5BI,uBA4BQC,GA5BR,EA4Ba;AACb,eAAOA,IAAInB,OAAJ,CAAY,QAAZ,EAAsB,UAASoB,CAAT,EAAYf,KAAZ,EAAmB;AAC5C,mBAAO,CAACA,UAAU,CAAV,GAAc,GAAd,GAAoB,EAArB,IAA2Be,EAAEC,WAAF,EAAlC;AACH,SAFM,CAAP;AAGH,KAhCG;AAiCJC,WAjCI,mBAiCIC,QAjCJ,EAiCc;AACd,YAAI,CAACA,QAAL,EAAe;AACX,mBAAO,EAAP;AACH;;AAED,YAAIrB,OAAO,EAAX;;AAEA,aAAK,IAAIa,IAAI,CAAR,EAAWC,MAAMO,SAASN,MAA/B,EAAuCF,IAAIC,GAA3C,EAAgDD,GAAhD,EAAqD;AACjDb,iBAAKsB,IAAL,CAAUD,SAASR,CAAT,CAAV;AACH;;AAED,eAAOb,IAAP;AACH,KA7CG;AA8CJuB,WA9CI,mBA8CIC,IA9CJ,EA8CUC,GA9CV,EA8CenB,KA9Cf,EA8CsB;AACtB,gBAAQmB,GAAR;AACI,iBAAK,OAAL;AACID,qBAAKE,KAAL,CAAWC,OAAX,GAAqBrB,KAArB;AACA;AACJ,iBAAK,OAAL;AACI,oBAAIsB,UAAUJ,KAAKI,OAAL,IAAgB,EAA9B;AACAA,0BAAUA,QAAQT,WAAR,EAAV;AACA,oBAAIS,YAAY,OAAZ,IAAuBA,YAAY,UAAvC,EAAmD;AAC/CJ,yBAAKlB,KAAL,GAAaA,KAAb;AACH,iBAFD,MAEO;AACH;AACAkB,yBAAKK,YAAL,CAAkBJ,GAAlB,EAAuBnB,KAAvB;AACH;AACD;AACJ;AACIkB,qBAAKK,YAAL,CAAkBJ,GAAlB,EAAuBnB,KAAvB;AACA;AAhBR;AAkBH;AAjEG,CAAR;;kBAoEef;;;;;;;;;;;;ACpEf;;;;;;;;AAEA,SAASuC,EAAT,CAAYF,OAAZ,EAAqBG,KAArB,EAA4BC,QAA5B,EAAsC;AAClC,QAAI,EAAE,gBAAgBC,OAAlB,CAAJ,EAAgC;AAC5B;AACA,YAAI,CAAC,eAAElC,OAAF,CAAUiC,QAAV,CAAD,IAAwBA,YAAY,IAAxC,EAA8C;AAC1CA,uBAAW,eAAE/B,KAAF,CAAQiC,SAAR,EAAmB,CAAnB,EAAsBC,MAAtB,CAA6B,eAAE3B,MAA/B,CAAX;AACH;AACD,eAAO,IAAIyB,OAAJ,CAAYL,OAAZ,EAAqBG,KAArB,EAA4BC,QAA5B,CAAP;AACH;AACJ;;IAGKC;AACF,qBAAYL,OAAZ,EAAqBG,KAArB,EAA4BC,QAA5B,EAAsC;AAAA;;AAClC;AACA,YAAI,eAAEjC,OAAF,CAAUgC,KAAV,CAAJ,EAAsB;AAClBC,uBAAWD,KAAX;AACAA,oBAAQ,EAAR;AACH;AACD,aAAKH,OAAL,GAAeA,OAAf;AACA,aAAKG,KAAL,GAAaA,SAAS,EAAtB;AACA,aAAKC,QAAL,GAAgBA,YAAY,EAA5B;AACA;AACA,aAAKP,GAAL,GAAWM,QAAQA,MAAMN,GAAd,GAAoB,KAAK,CAApC;AACA,YAAIW,QAAQ,CAAZ;AACA,uBAAE1B,IAAF,CAAO,KAAKsB,QAAZ,EAAsB,UAACK,KAAD,EAAQxB,CAAR,EAAc;AAChC,gBAAIwB,iBAAiBJ,OAArB,EAA8B;AAC1BG,yBAASC,MAAMD,KAAf;AACH,aAFD,MAEO;AACHJ,yBAASnB,CAAT,IAAc,KAAKwB,KAAnB;AACH;AACDD;AACH,SAPD;AAQA,aAAKA,KAAL,GAAaA,KAAb;AACH;AACD;;;;;iCACS;AACL,gBAAIN,KAAKQ,SAASC,aAAT,CAAuB,KAAKX,OAA5B,CAAT;AACA,gBAAIG,QAAQ,KAAKA,KAAjB;AAFK;AAAA;AAAA;;AAAA;AAGL,qCAAkCrC,OAAO8C,OAAP,CAAeT,KAAf,CAAlC,8HAAyD;AAAA;;AAAA;;AAAA,wBAA/CU,QAA+C;AAAA,wBAArCC,SAAqC;;AACrD,mCAAEnB,OAAF,CAAUO,EAAV,EAAcW,QAAd,EAAwBC,SAAxB,EADqD,CACjB;AACvC;AACD;AANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOL,2BAAEhC,IAAF,CAAO,KAAKsB,QAAZ,EAAsB,UAACK,KAAD,EAAW;AAC7B,oBAAIM,UAAWN,iBAAiBJ,OAAlB,GACVI,MAAMO,MAAN,EADU,GACU;AACpBN,yBAASO,cAAT,CAAwBR,KAAxB,CAFJ,CAD6B,CAGO;AACpCP,mBAAGgB,WAAH,CAAeH,OAAf;AACH,aALD;AAMA,mBAAOb,EAAP;AACH;;;;;;kBAMUA;;;;;;;;;;;kBC/CSiB;;AAVxB;;;;;;AAEO,IAAMC,wBAAQ;AACjBC,UAAM,MADW;AAEjBC,WAAO,OAFU;AAGjBC,aAAS,SAHQ;AAIjBC,YAAQ,QAJS;AAKjBC,YAAQ;AALS,CAAd;;AAQQ,SAASN,KAAT,CAAevB,IAAf,EAAqB8B,OAArB,EAA8B;AACzC,QAAIC,SAAS,EAAE;AACXpD,eAAO;AADE,KAAb;AAGAqD,YAAQhC,IAAR,EAAc+B,MAAd,EAAsBD,OAAtB;AACH;;AAED,SAASE,OAAT,CAAiBhC,IAAjB,EAAuB+B,MAAvB,EAA+BD,OAA/B,EAAwC;AACpC,QAAIG,iBAAiBH,QAAQC,OAAOpD,KAAf,CAArB,CADoC,CACO;;AAE3C,QAAIW,MAAMU,KAAKkC,UAAL,GAAkBlC,KAAKkC,UAAL,CAAgB3C,MAAlC,GAA2C,CAArD;AACA,SAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAIC,GAApB,EAAyBD,GAAzB,EAA8B;AAC1B,YAAIwB,QAAQb,KAAKkC,UAAL,CAAgB7C,CAAhB,CAAZ;AACA0C,eAAOpD,KAAP;AACIqD,gBAAQnB,KAAR,EAAekB,MAAf,EAAuBD,OAAvB,EAHsB,CAGU;AACvC;AACD;AACA,QAAIG,cAAJ,EAAoB;AAChBE,qBAAanC,IAAb,EAAmBiC,cAAnB;AACH;AACJ;;AAED,SAASE,YAAT,CAAsBnC,IAAtB,EAA4BiC,cAA5B,EAA4C;AACxC,QAAIG,cAAc,CAAlB;AACA,mBAAElD,IAAF,CAAO+C,cAAP,EAAuB,UAACI,YAAD,EAAkB;AACrC,gBAAQA,aAAarE,IAArB;AACI,iBAAKwD,MAAMG,OAAX;AACI,oBAAIW,UAAW,OAAOD,aAAarC,IAApB,KAA6B,QAA9B,GAA0Cc,SAASO,cAAT,CAAwBgB,aAAarC,IAArC,CAA1C,GACVqC,aAAarC,IAAb,CAAkBoB,MAAlB,EADJ;AAEApB,qBAAKuC,UAAL,CAAgBC,YAAhB,CAA6BF,OAA7B,EAAsCtC,IAAtC;AACA;;AAEJ,iBAAKwB,MAAMK,MAAX;AACI,oBAAIY,aAAc,QAAOJ,aAAarC,IAApB,MAA6B,QAA9B,GAA0CqC,aAAarC,IAAb,CAAkBoB,MAAlB,EAA1C,GACjBN,SAASO,cAAT,CAAwBgB,aAAarC,IAArC,CADA;AAEAA,qBAAKsB,WAAL,CAAiBmB,UAAjB;AACA;AACJ,iBAAKjB,MAAMI,MAAX;AACI;AACA,oBAAIc,cAAcL,aAAa1D,KAAb,GAAqByD,WAAvC;AACApC,qBAAK2C,WAAL,CAAiB3C,KAAKkC,UAAL,CAAgBQ,WAAhB,CAAjB;AACAN;AACA;AACJ,iBAAKZ,MAAME,KAAX;AACIkB,yBAAS5C,IAAT,EAAeqC,aAAa9B,KAA5B;AACA;AACJ,iBAAKiB,MAAMC,IAAX;AACI,oBAAIzB,KAAK6C,WAAT,EAAsB7C,KAAK6C,WAAL,GAAmBR,aAAaS,OAAhC;AACtB;AACJ;AACI,sBAAM,IAAIC,KAAJ,CAAU,wBAAwBV,aAAarE,IAA/C,CAAN;AAzBR;AA2BH,KA5BD;AA6BH;;AAED,SAAS4E,QAAT,CAAkB5C,IAAlB,EAAwBO,KAAxB,EAA+B;AAC3B,SAAK,IAAIN,GAAT,IAAgBM,KAAhB,EAAuB;AACnB,YAAI,eAAE1B,WAAF,CAAc0B,MAAMN,GAAN,CAAd,CAAJ,EAA+B;AAC3BD,iBAAKgD,eAAL,CAAqB/C,GAArB;AACH,SAFD,MAEO;AACH,gBAAInB,QAAQyB,MAAMN,GAAN,CAAZ;AACA,2BAAEF,OAAF,CAAUC,IAAV,EAAgBC,GAAhB,EAAqBnB,KAArB;AACH;AACJ;AACJ;;;;;;;;kBCpEc,UAAUmE,OAAV,EAAmBC,OAAnB,EAA4B;AACvC,QAAIvE,QAAQ,CAAZ,CADuC,CACxB;AACf,QAAImD,UAAU,EAAd,CAFuC,CAErB;AAClB;AACAE,YAAQiB,OAAR,EAAiBC,OAAjB,EAA0BvE,KAA1B,EAAiCmD,OAAjC;AACA,WAAOA,OAAP;AACH;;AAZD;;;;AAEA;;;;AAYA,SAASE,OAAT,CAAiBmB,OAAjB,EAA0Bb,OAA1B,EAAmC3D,KAAnC,EAA0CmD,OAA1C,EAAmD;AAC/C;AACA;AACA,QAAIO,eAAe,EAAnB;AACA;;AAEA,QAAI,eAAEtD,OAAF,CAAUuD,OAAV,CAAJ,EAAwB;AACpB;;AAEA;AACH,KAJD,MAIO,IAAI,eAAErD,QAAF,CAAWkE,OAAX,KAAuB,eAAElE,QAAF,CAAWqD,OAAX,CAA3B,EAAgD;AACnD;AACA,YAAIA,YAAYa,OAAhB,EAAyB;AACrBd,yBAAavC,IAAb,CAAkB;AACd9B,sBAAM,aAAMyD,IADE;AAEdqB,yBAASR;AAFK,aAAlB;AAIH;AACD;AACH,KATM,MASA,IAAIa,QAAQ/C,OAAR,KAAoBkC,QAAQlC,OAA5B,IAAuC+C,QAAQlD,GAAR,KAAgBqC,QAAQrC,GAAnE,EAAwE;AAC3E;AACA,YAAImD,eAAeC,UAAUF,OAAV,EAAmBb,OAAnB,CAAnB;AACA,YAAIc,YAAJ,EAAkB;AACdf,yBAAavC,IAAb,CAAkB;AACd9B,sBAAM,aAAM0D,KADE;AAEdnB,uBAAO6C;AAFO,aAAlB;AAIH;AACD;AACAE,qBACIH,QAAQ3C,QADZ,EAEI8B,QAAQ9B,QAFZ,EAGI7B,KAHJ,EAIImD,OAJJ,EAKIO,YALJ;AAOA;AACH,KAlBM,MAkBA;AACHA,qBAAavC,IAAb,CAAkB;AACd9B,kBAAM,aAAM2D,OADE;AAEd3B,kBAAMsC;AAFQ,SAAlB;AAIH;AACD;AACA,QAAID,aAAa9C,MAAjB,EAAyB;AACrBuC,gBAAQnD,KAAR,IAAiB0D,YAAjB;AACH;AACJ;;AAED,SAASiB,YAAT,CAAsBC,WAAtB,EAAmCC,WAAnC,EAAgD7E,KAAhD,EAAuDmD,OAAvD,EAAgEO,YAAhE,EAA8E;AAC1E,QAAIoB,WAAW,IAAf;AACA,QAAIC,mBAAmB/E,KAAvB;AACA;AACA,mBAAEO,IAAF,CAAOqE,WAAP,EAAoB,UAAC1C,KAAD,EAAQxB,CAAR,EAAc;AAC9B,YAAIsE,WAAWH,YAAYnE,CAAZ,CAAf;AACA;AACA,YAAIsE,QAAJ,EAAc;AACV;AACAD,+BAAoBD,YAAYA,SAAS7C,KAAtB,GAAgC;AAC/C8C,+BAAmBD,SAAS7C,KAA5B,GAAoC,CADrB,GAEf8C,mBAAmB,CAFvB;AAGA1B,oBAAQnB,KAAR,EAAe8C,QAAf,EAAyBD,gBAAzB,EAA2C5B,OAA3C,EALU,CAK4C;AACtD2B,uBAAW5C,KAAX;AACJ;AACC,SARD,MAQO;AACHwB,yBAAavC,IAAb,CAAkB;AACd9B,sBAAM,aAAM4D,MADE;AAEdjD,uBAAOU;AAFO,aAAlB;AAIH;AACJ,KAjBD;AAkBA;AACA,QAAIkE,YAAYhE,MAAZ,GAAqBiE,YAAYjE,MAArC,EAA6C;AACzC,YAAIF,IAAIkE,YAAYhE,MAApB;AACA,eAAOF,IAAImE,YAAYjE,MAAvB,EAA+B;AAC3B,gBAAIoE,WAAWH,YAAYnE,CAAZ,CAAf;AACAgD,yBAAavC,IAAb,CAAkB;AACd9B,sBAAM,aAAM6D,MADE;AAEd7B,sBAAM2D;AAFQ,aAAlB;AAIAtE;AACH;AACJ;AACJ;;AAED,SAASgE,SAAT,CAAmBF,OAAnB,EAA4Bb,OAA5B,EAAqC;AACjC,QAAIsB,UAAU,KAAd;AACA,QAAIC,WAAWV,QAAQ5C,KAAvB;AACA,QAAIuD,WAAWxB,QAAQ/B,KAAvB;;AAEA,QAAI6C,eAAe,EAAnB;;AAEA;AACA,SAAK,IAAInD,GAAT,IAAgB4D,QAAhB,EAA0B;AACtB,YAAI/E,QAAQ+E,SAAS5D,GAAT,CAAZ;AACA,YAAI6D,SAAS7D,GAAT,MAAkBnB,KAAtB,EAA6B;AACzB8E,sBAAU,IAAV;AACAR,yBAAanD,GAAb,IAAoB6D,SAAS7D,GAAT,CAApB;AACH;AACJ;;AAED;AACA,SAAK,IAAIA,IAAT,IAAgB6D,QAAhB,EAA0B;AACtB,YAAIhF,SAAQgF,SAAS7D,IAAT,CAAZ;AACA,YAAI,CAAC4D,SAASE,cAAT,CAAwB9D,IAAxB,CAAL,EAAmC;AAC/B2D,sBAAU,IAAV;AACAR,yBAAanD,IAAb,IAAoB6D,SAAS7D,IAAT,CAApB;AACH;AACJ;;AAED,QAAI2D,OAAJ,EAAa;AACT,eAAOR,YAAP;AACH;AACD;AACA,WAAO,IAAP;AAEH;;;;AClID;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIY,OAAO,uBAAG,KAAH,EAAU;AACjB,UAAM;AADW,CAAV,EAER,CACC,uBAAG,IAAH,EAAS;AACL9D,WAAO;AADF,CAAT,EAEG,CAAC,mBAAD,CAFH,CADD,EAIC,uBAAG,GAAH,EAAQ,CAAC,oBAAD,CAAR,CAJD,EAKC,uBAAG,IAAH,EAAS,CAAC,uBAAG,IAAH,CAAD,CAAT,CALD,CAFQ,CAAX;;AAUA;AACA,IAAI+D,OAAOD,KAAK5C,MAAL,EAAX;AACAN,SAASoD,IAAT,CAAc5C,WAAd,CAA0B2C,IAA1B;AACA;AACA,IAAIf,UAAU,uBAAG,KAAH,EAAU;AACpB,UAAM;AADc,CAAV,EAEX,CACC,uBAAG,IAAH,EAAS;AACLhD,WAAO;AADF,CAAT,EAEG,CAAC,mBAAD,CAFH,CADD,EAIC,uBAAG,GAAH,EAAQ,CAAC,oBAAD,CAAR,CAJD,EAKC,uBAAG,IAAH,EAAS,CAAC,uBAAG,IAAH,CAAD,EAAW,uBAAG,IAAH,CAAX,CAAT,CALD,CAFW,CAAd;AASAiE,WAAW,YAAM;AACb;AACA,QAAIrC,UAAU,oBAAKkC,IAAL,EAAWd,OAAX,CAAd;;AAEA;AACA,yBAAMe,IAAN,EAAYnC,OAAZ;AAGH,CARD,EAQE,IARF","file":"70ca30e6ed374a1c0a74c200da103375.map","sourcesContent":["let _ = {\n\n    type(obj) {\n        return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, '')\n    },\n    isArray(list) {\n        return _.type(list) === 'Array'\n    },\n    slice(arrayLike, index) {\n        return Array.prototype.slice.call(arrayLike, index)\n    },\n    isUndefined(value) {\n        return typeof value === 'undefined';\n    },\n    isUndef(value){\n        return typeof value === 'undefined' || value === null;\n    },\n    truthy(value) {\n        return !!value\n    },\n    isString(list) {\n        return _.type(list) === 'String'\n    },\n    each(array, fn) {\n        for (let i = 0, len = array.length; i < len; i++) {\n            fn(array[i], i)\n        }\n    },\n    hump2lineae(str) {\n        return str.replace(/[A-Z]/g, function(m, index) {\n            return (index !== 0 ? '-' : '') + m.toLowerCase();\n        });\n    },\n    toArray(listLike) {\n        if (!listLike) {\n            return []\n        }\n\n        let list = []\n\n        for (let i = 0, len = listLike.length; i < len; i++) {\n            list.push(listLike[i])\n        }\n\n        return list\n    },\n    setAttr(node, key, value) {\n        switch (key) {\n            case 'style':\n                node.style.cssText = value\n                break\n            case 'value':\n                let tagName = node.tagName || ''\n                tagName = tagName.toLowerCase()\n                if (tagName === 'input' || tagName === 'textarea') {\n                    node.value = value\n                } else {\n                    // if it is not a input or textarea, use `setAttribute` to set\n                    node.setAttribute(key, value)\n                }\n                break\n            default:\n                node.setAttribute(key, value)\n                break\n        }\n    }\n}\n\nexport default _","import _ from './util'\n\nfunction el(tagName, props, children) {\n    if (!(this instanceof Element)) {\n        //处理传入children不是数组的情况\n        if (!_.isArray(children) && children != null) {\n            children = _.slice(arguments, 2).filter(_.truthy)\n        }\n        return new Element(tagName, props, children)\n    }\n}\n\n\nclass Element {\n    constructor(tagName, props, children) {\n        //处理没有props的情况\n        if (_.isArray(props)) {\n            children = props\n            props = {}\n        }\n        this.tagName = tagName\n        this.props = props || {}\n        this.children = children || []\n        //标识符，tagName可能会相同,所以传入的props中最好有个key\n        this.key = props ? props.key : void 0\n        let count = 0\n        _.each(this.children, (child, i) => {\n            if (child instanceof Element) {\n                count += child.count\n            } else {\n                children[i] = '' + child\n            }\n            count++\n        })\n        this.count = count\n    }\n    //将js对象渲染成Dom节点\n    render() {\n        let el = document.createElement(this.tagName)\n        let props = this.props\n        for (let [propName, propValue] of Object.entries(props)) {\n            _.setAttr(el, propName, propValue)  //设置节点的DOM属性\n        }\n        //递归渲染children\n        _.each(this.children, (child) => {\n            let childEl = (child instanceof Element) ?\n                child.render() :    // 如果子节点也是虚拟DOM，递归构建DOM节点\n                document.createTextNode(child)  // 如果字符串，只构建文本节点\n            el.appendChild(childEl)\n        })\n        return el\n    }\n}\n\n\n\n\nexport default el","import _ from './util';\n\nexport const types = {\n    TEXT: 'TEXT',\n    PROPS: 'PROPS',\n    REPLACE: 'REPLACE',\n    REMOVE: 'REMOVE',\n    APPEND: 'APPEND'\n};\n\nexport default function patch(node, patches) {\n    let walker = { //遍历的节点index\n        index: 0\n    }\n    dfsWalk(node, walker, patches)\n}\n\nfunction dfsWalk(node, walker, patches) {\n    let currentPatches = patches[walker.index] // 从patches拿出当前节点的差异\n\n    let len = node.childNodes ? node.childNodes.length : 0;\n    for (let i = 0; i < len; i++) {\n        let child = node.childNodes[i]\n        walker.index++\n            dfsWalk(child, walker, patches) //深度遍历子节点\n    }\n    //有变化就改\n    if (currentPatches) {\n        applyPatches(node, currentPatches)\n    }\n}\n\nfunction applyPatches(node, currentPatches) {\n    let removeCount = 0;\n    _.each(currentPatches, (currentPatch) => {\n        switch (currentPatch.type) {\n            case types.REPLACE:\n                let newNode = (typeof currentPatch.node === 'string') ? document.createTextNode(currentPatch.node) :\n                    currentPatch.node.render()\n                node.parentNode.replaceChild(newNode, node)\n                break;\n            \n            case types.APPEND:\n                let insertNode = (typeof currentPatch.node === 'object') ? currentPatch.node.render() : \n                document.createTextNode(currentPatch.node);\n                node.appendChild(insertNode)\n                break;\n            case types.REMOVE:\n                //remove之后传的index会有变化\n                let removeIndex = currentPatch.index - removeCount;\n                node.removeChild(node.childNodes[removeIndex])\n                removeCount++\n                break;\n            case types.PROPS:\n                setProps(node, currentPatch.props);\n                break;\n            case types.TEXT:\n                if (node.textContent) node.textContent = currentPatch.content;\n                break;\n            default:\n                throw new Error('Unknown patch type ' + currentPatch.type);\n        }\n    });\n}\n\nfunction setProps(node, props) {\n    for (let key in props) {\n        if (_.isUndefined(props[key])) {\n            node.removeAttribute(key);\n        } else {\n            let value = props[key];\n            _.setAttr(node, key, value);\n        }\n    }\n}","import _ from './util';\n\nimport {\n    types\n} from './patch';\n\nexport default function (oldTree, newTree) {\n    let index = 0; // 当前节点的标志\n    let patches = {}; // 用来记录每个节点差异的对象\n    //在深度优先遍历的时候，每遍历到一个节点就把该节点和新的的树进行对比。如果有差异的话就记录到一个对象里面。\n    dfsWalk(oldTree, newTree, index, patches);\n    return patches;\n}\n\nfunction dfsWalk(oldNode, newNode, index, patches) {\n    // 对比oldNode和newNode的不同，记录下来\n    //先进行本层的对比\n    let currentPatch = [];\n    // Node is removed.\n\n    if (_.isUndef(newNode)) {\n        // Real DOM node will be removed when perform reordering, so has no needs to do anthings in here\n\n        //处理文本节点\n    } else if (_.isString(oldNode) && _.isString(newNode)) {\n        //不同的话记录\n        if (newNode !== oldNode) {\n            currentPatch.push({\n                type: types.TEXT,\n                content: newNode\n            });\n        }\n        // Nodes are the same, diff props andchildren\n    } else if (oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {\n        // diff props\n        let propsPatches = diffProps(oldNode, newNode);\n        if (propsPatches) {\n            currentPatch.push({\n                type: types.PROPS,\n                props: propsPatches\n            });\n        }\n        // diff children\n        diffChildren(\n            oldNode.children,\n            newNode.children,\n            index,\n            patches,\n            currentPatch\n        );\n        // Nodes are not the same, replace the old node with new node\n    } else {\n        currentPatch.push({\n            type: types.REPLACE,\n            node: newNode\n        });\n    }\n    //如果有变化的话，patches记录\n    if (currentPatch.length) {\n        patches[index] = currentPatch;\n    }\n}\n\nfunction diffChildren(oldChildren, newChildren, index, patches, currentPatch) {\n    let leftNode = null\n    let currentNodeIndex = index\n    //处理长为oldChildren.length这段\n    _.each(oldChildren, (child, i) => {\n        let newChild = newChildren[i]\n        //存在这个节点\n        if (newChild) {\n            //遍历是用的深度便利，所以每个节点都会有唯一的index\n            currentNodeIndex = (leftNode && leftNode.count) ?  //计算节点标识\n                currentNodeIndex + leftNode.count + 1 :\n                currentNodeIndex + 1\n            dfsWalk(child, newChild, currentNodeIndex, patches)   // 深度遍历子节点\n            leftNode = child\n        //没有这个节点\n        } else {\n            currentPatch.push({\n                type: types.REMOVE,\n                index: i\n            })\n        }\n    })\n    //多了节点的情况\n    if (oldChildren.length < newChildren.length) {\n        let i = oldChildren.length\n        while (i < newChildren.length) {\n            let newChild = newChildren[i]\n            currentPatch.push({\n                type: types.APPEND,\n                node: newChild\n            })\n            i++\n        }\n    }\n}\n\nfunction diffProps(oldNode, newNode) {\n    let hasDiff = false;\n    let oldProps = oldNode.props;\n    let newProps = newNode.props;\n\n    let propsPatches = {};\n\n    // Find out different properties\n    for (let key in oldProps) {\n        let value = oldProps[key];\n        if (newProps[key] !== value) {\n            hasDiff = true;\n            propsPatches[key] = newProps[key];\n        }\n    }\n\n    // Find out new property\n    for (let key in newProps) {\n        let value = newProps[key];\n        if (!oldProps.hasOwnProperty(key)) {\n            hasDiff = true;\n            propsPatches[key] = newProps[key];\n        }\n    }\n\n    if (hasDiff) {\n        return propsPatches;\n    }\n    // If properties all are identical\n    return null;\n\n}","import el from '../element'\nimport diff from '../diff'\nimport patch from '../patch'\n\n//1. use `el(tagName, [propeties], children)` to create a virtual dom tree\nlet tree = el('div', {\n    'id': 'container'\n}, [\n    el('h1', {\n        style: 'color: blue'\n    }, ['simple virtal dom']),\n    el('p', ['Hello, virtual-dom']),\n    el('ul', [el('li')])\n])\n\n// 2. generate a real dom from virtual dom. `root` is a `div` element\nlet root = tree.render()\ndocument.body.appendChild(root)\n// 3. generate another different virtual dom tree\nlet newTree = el('div', {\n    'id': 'container'\n}, [\n    el('h1', {\n        style: 'color: red'\n    }, ['simple virtal dom']),\n    el('p', ['Hello, virtual-dom']),\n    el('ul', [el('li'), el('li')])\n])\nsetTimeout(() => {\n    // 4. diff two virtual dom trees and get patches\n    let patches = diff(tree, newTree)\n\n    // 5. apply patches to real dom\n    patch(root, patches)\n\n\n},5000)"]}